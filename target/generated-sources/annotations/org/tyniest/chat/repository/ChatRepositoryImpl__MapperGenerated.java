package org.tyniest.chat.repository;

import com.datastax.oss.driver.api.core.PagingIterable;
import com.datastax.oss.driver.api.core.cql.BoundStatement;
import com.datastax.oss.driver.api.core.cql.BoundStatementBuilder;
import com.datastax.oss.driver.api.core.cql.PreparedStatement;
import com.datastax.oss.driver.api.core.cql.SimpleStatement;
import com.datastax.oss.driver.api.core.type.reflect.GenericType;
import com.datastax.oss.driver.api.mapper.MapperContext;
import com.datastax.oss.driver.api.mapper.entity.saving.NullSavingStrategy;
import com.datastax.oss.driver.internal.core.util.concurrent.BlockingOperation;
import com.datastax.oss.driver.internal.core.util.concurrent.CompletableFutures;
import com.datastax.oss.driver.internal.mapper.DaoBase;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.lang.Throwable;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.UUID;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.tyniest.chat.entity.Chat;
import org.tyniest.chat.entity.ChatByUser;
import org.tyniest.chat.entity.ChatByUserHelper__MapperGenerated;
import org.tyniest.chat.entity.ChatHelper__MapperGenerated;
import org.tyniest.chat.entity.Reaction;
import org.tyniest.chat.entity.ReactionHelper__MapperGenerated;
import org.tyniest.chat.entity.UserByChat;
import org.tyniest.chat.entity.UserByChatHelper__MapperGenerated;

/**
 * Generated by the DataStax driver mapper, do not edit directly.
 */
@SuppressWarnings("all")
public class ChatRepositoryImpl__MapperGenerated extends DaoBase implements ChatRepository {
  private static final GenericType<List<UUID>> GENERIC_TYPE = new GenericType<List<UUID>>(){};

  private static final Logger LOG = LoggerFactory.getLogger(ChatRepositoryImpl__MapperGenerated.class);

  private final ChatHelper__MapperGenerated chatHelper;

  private final UserByChatHelper__MapperGenerated userByChatHelper;

  private final ChatByUserHelper__MapperGenerated chatByUserHelper;

  private final ReactionHelper__MapperGenerated reactionHelper;

  private final PreparedStatement findByIdStatement;

  private final PreparedStatement saveStatement;

  private final PreparedStatement saveStatement1;

  private final PreparedStatement saveStatement2;

  private final PreparedStatement saveStatement3;

  private final PreparedStatement deleteStatement;

  private final PreparedStatement deleteStatement1;

  private final PreparedStatement deleteStatement2;

  private final PreparedStatement deleteStatement3;

  private final PreparedStatement findByUserIdStatement;

  private final PreparedStatement findAllByIdsStatement;

  private final PreparedStatement findBySignalIdStatement;

  private ChatRepositoryImpl__MapperGenerated(MapperContext context,
      ChatHelper__MapperGenerated chatHelper, UserByChatHelper__MapperGenerated userByChatHelper,
      ChatByUserHelper__MapperGenerated chatByUserHelper,
      ReactionHelper__MapperGenerated reactionHelper, PreparedStatement findByIdStatement,
      PreparedStatement saveStatement, PreparedStatement saveStatement1,
      PreparedStatement saveStatement2, PreparedStatement saveStatement3,
      PreparedStatement deleteStatement, PreparedStatement deleteStatement1,
      PreparedStatement deleteStatement2, PreparedStatement deleteStatement3,
      PreparedStatement findByUserIdStatement, PreparedStatement findAllByIdsStatement,
      PreparedStatement findBySignalIdStatement) {
    super(context);
    this.chatHelper = chatHelper;
    this.userByChatHelper = userByChatHelper;
    this.chatByUserHelper = chatByUserHelper;
    this.reactionHelper = reactionHelper;
    this.findByIdStatement = findByIdStatement;
    this.saveStatement = saveStatement;
    this.saveStatement1 = saveStatement1;
    this.saveStatement2 = saveStatement2;
    this.saveStatement3 = saveStatement3;
    this.deleteStatement = deleteStatement;
    this.deleteStatement1 = deleteStatement1;
    this.deleteStatement2 = deleteStatement2;
    this.deleteStatement3 = deleteStatement3;
    this.findByUserIdStatement = findByUserIdStatement;
    this.findAllByIdsStatement = findAllByIdsStatement;
    this.findBySignalIdStatement = findBySignalIdStatement;
  }

  @Override
  public Optional<Chat> findById(UUID productId) {
    BoundStatementBuilder boundStatementBuilder = findByIdStatement.boundStatementBuilder();
    boundStatementBuilder = boundStatementBuilder.set("id", productId, UUID.class);
    BoundStatement boundStatement = boundStatementBuilder.build();
    return executeAndMapToOptionalEntity(boundStatement, chatHelper);
  }

  @Override
  public void save(Chat product) {
    BoundStatementBuilder boundStatementBuilder = saveStatement.boundStatementBuilder();
    chatHelper.set(product, boundStatementBuilder, NullSavingStrategy.DO_NOT_SET, false);
    BoundStatement boundStatement = boundStatementBuilder.build();
    execute(boundStatement);
  }

  @Override
  public void save(UserByChat product) {
    BoundStatementBuilder boundStatementBuilder = saveStatement1.boundStatementBuilder();
    userByChatHelper.set(product, boundStatementBuilder, NullSavingStrategy.DO_NOT_SET, false);
    BoundStatement boundStatement = boundStatementBuilder.build();
    execute(boundStatement);
  }

  @Override
  public void save(ChatByUser product) {
    BoundStatementBuilder boundStatementBuilder = saveStatement2.boundStatementBuilder();
    chatByUserHelper.set(product, boundStatementBuilder, NullSavingStrategy.DO_NOT_SET, false);
    BoundStatement boundStatement = boundStatementBuilder.build();
    execute(boundStatement);
  }

  @Override
  public void save(Reaction reaction) {
    BoundStatementBuilder boundStatementBuilder = saveStatement3.boundStatementBuilder();
    reactionHelper.set(reaction, boundStatementBuilder, NullSavingStrategy.DO_NOT_SET, false);
    BoundStatement boundStatement = boundStatementBuilder.build();
    execute(boundStatement);
  }

  @Override
  public void delete(Reaction reaction) {
    BoundStatementBuilder boundStatementBuilder = deleteStatement.boundStatementBuilder();
    boundStatementBuilder = boundStatementBuilder.set("signal_id", reaction.getSignalId(), UUID.class);
    boundStatementBuilder = boundStatementBuilder.set("user_id", reaction.getUserId(), UUID.class);
    boundStatementBuilder = boundStatementBuilder.set("value", reaction.getValue(), String.class);
    BoundStatement boundStatement = boundStatementBuilder.build();
    execute(boundStatement);
  }

  @Override
  public void delete(UserByChat product) {
    BoundStatementBuilder boundStatementBuilder = deleteStatement1.boundStatementBuilder();
    boundStatementBuilder = boundStatementBuilder.set("chat_id", product.getChatId(), UUID.class);
    BoundStatement boundStatement = boundStatementBuilder.build();
    execute(boundStatement);
  }

  @Override
  public void delete(ChatByUser product) {
    BoundStatementBuilder boundStatementBuilder = deleteStatement2.boundStatementBuilder();
    boundStatementBuilder = boundStatementBuilder.set("user_id", product.getUserId(), UUID.class);
    BoundStatement boundStatement = boundStatementBuilder.build();
    execute(boundStatement);
  }

  @Override
  public void delete(Chat product) {
    BoundStatementBuilder boundStatementBuilder = deleteStatement3.boundStatementBuilder();
    boundStatementBuilder = boundStatementBuilder.set("id", product.getId(), UUID.class);
    BoundStatement boundStatement = boundStatementBuilder.build();
    execute(boundStatement);
  }

  @Override
  public PagingIterable<ChatByUser> findByUserId(UUID userId) {
    BoundStatementBuilder boundStatementBuilder = findByUserIdStatement.boundStatementBuilder();
    boundStatementBuilder = boundStatementBuilder.set("user_id", userId, UUID.class);
    BoundStatement boundStatement = boundStatementBuilder.build();
    return executeAndMapToEntityIterable(boundStatement, chatByUserHelper);
  }

  @Override
  public PagingIterable<Chat> findAllByIds(List<UUID> chatIds) {
    BoundStatementBuilder boundStatementBuilder = findAllByIdsStatement.boundStatementBuilder();
    boundStatementBuilder = boundStatementBuilder.set("chatIds", chatIds, GENERIC_TYPE);
    BoundStatement boundStatement = boundStatementBuilder.build();
    return executeAndMapToEntityIterable(boundStatement, chatHelper);
  }

  @Override
  public PagingIterable<Reaction> findBySignalId(List<UUID> signalIds) {
    BoundStatementBuilder boundStatementBuilder = findBySignalIdStatement.boundStatementBuilder();
    boundStatementBuilder = boundStatementBuilder.set("signalIds", signalIds, GENERIC_TYPE);
    BoundStatement boundStatement = boundStatementBuilder.build();
    return executeAndMapToEntityIterable(boundStatement, reactionHelper);
  }

  public static CompletableFuture<ChatRepository> initAsync(MapperContext context) {
    LOG.debug("[{}] Initializing new instance for keyspace = {} and table = {}",
        context.getSession().getName(),
        context.getKeyspaceId(),
        context.getTableId());
    throwIfProtocolVersionV3(context);
    try {
      // Initialize all entity helpers
      ChatHelper__MapperGenerated chatHelper = new ChatHelper__MapperGenerated(context);
      if ((Boolean)context.getCustomState().get("datastax.mapper.schemaValidationEnabled")) {
        chatHelper.validateEntityFields();
      }
      UserByChatHelper__MapperGenerated userByChatHelper = new UserByChatHelper__MapperGenerated(context);
      if ((Boolean)context.getCustomState().get("datastax.mapper.schemaValidationEnabled")) {
        userByChatHelper.validateEntityFields();
      }
      ChatByUserHelper__MapperGenerated chatByUserHelper = new ChatByUserHelper__MapperGenerated(context);
      if ((Boolean)context.getCustomState().get("datastax.mapper.schemaValidationEnabled")) {
        chatByUserHelper.validateEntityFields();
      }
      ReactionHelper__MapperGenerated reactionHelper = new ReactionHelper__MapperGenerated(context);
      if ((Boolean)context.getCustomState().get("datastax.mapper.schemaValidationEnabled")) {
        reactionHelper.validateEntityFields();
      }
      List<CompletionStage<PreparedStatement>> prepareStages = new ArrayList<>();
      // Prepare the statement for `findById(java.util.UUID)`:
      SimpleStatement findByIdStatement_simple = chatHelper.selectByPrimaryKeyParts(1).build();
      LOG.debug("[{}] Preparing query `{}` for method findById(java.util.UUID)",
          context.getSession().getName(),
          findByIdStatement_simple.getQuery());
      CompletionStage<PreparedStatement> findByIdStatement = prepare(findByIdStatement_simple, context);
      prepareStages.add(findByIdStatement);
      // Prepare the statement for `save(org.tyniest.chat.entity.Chat)`:
      SimpleStatement saveStatement_simple = chatHelper.insert().build();
      LOG.debug("[{}] Preparing query `{}` for method save(org.tyniest.chat.entity.Chat)",
          context.getSession().getName(),
          saveStatement_simple.getQuery());
      CompletionStage<PreparedStatement> saveStatement = prepare(saveStatement_simple, context);
      prepareStages.add(saveStatement);
      // Prepare the statement for `save(org.tyniest.chat.entity.UserByChat)`:
      SimpleStatement saveStatement1_simple = userByChatHelper.insert().build();
      LOG.debug("[{}] Preparing query `{}` for method save(org.tyniest.chat.entity.UserByChat)",
          context.getSession().getName(),
          saveStatement1_simple.getQuery());
      CompletionStage<PreparedStatement> saveStatement1 = prepare(saveStatement1_simple, context);
      prepareStages.add(saveStatement1);
      // Prepare the statement for `save(org.tyniest.chat.entity.ChatByUser)`:
      SimpleStatement saveStatement2_simple = chatByUserHelper.insert().build();
      LOG.debug("[{}] Preparing query `{}` for method save(org.tyniest.chat.entity.ChatByUser)",
          context.getSession().getName(),
          saveStatement2_simple.getQuery());
      CompletionStage<PreparedStatement> saveStatement2 = prepare(saveStatement2_simple, context);
      prepareStages.add(saveStatement2);
      // Prepare the statement for `save(org.tyniest.chat.entity.Reaction)`:
      SimpleStatement saveStatement3_simple = reactionHelper.insert().ifNotExists().build();
      LOG.debug("[{}] Preparing query `{}` for method save(org.tyniest.chat.entity.Reaction)",
          context.getSession().getName(),
          saveStatement3_simple.getQuery());
      CompletionStage<PreparedStatement> saveStatement3 = prepare(saveStatement3_simple, context);
      prepareStages.add(saveStatement3);
      // Prepare the statement for `delete(org.tyniest.chat.entity.Reaction)`:
      SimpleStatement deleteStatement_simple = reactionHelper.deleteByPrimaryKeyParts(3).build();
      LOG.debug("[{}] Preparing query `{}` for method delete(org.tyniest.chat.entity.Reaction)",
          context.getSession().getName(),
          deleteStatement_simple.getQuery());
      CompletionStage<PreparedStatement> deleteStatement = prepare(deleteStatement_simple, context);
      prepareStages.add(deleteStatement);
      // Prepare the statement for `delete(org.tyniest.chat.entity.UserByChat)`:
      SimpleStatement deleteStatement1_simple = userByChatHelper.deleteByPrimaryKeyParts(1).build();
      LOG.debug("[{}] Preparing query `{}` for method delete(org.tyniest.chat.entity.UserByChat)",
          context.getSession().getName(),
          deleteStatement1_simple.getQuery());
      CompletionStage<PreparedStatement> deleteStatement1 = prepare(deleteStatement1_simple, context);
      prepareStages.add(deleteStatement1);
      // Prepare the statement for `delete(org.tyniest.chat.entity.ChatByUser)`:
      SimpleStatement deleteStatement2_simple = chatByUserHelper.deleteByPrimaryKeyParts(1).build();
      LOG.debug("[{}] Preparing query `{}` for method delete(org.tyniest.chat.entity.ChatByUser)",
          context.getSession().getName(),
          deleteStatement2_simple.getQuery());
      CompletionStage<PreparedStatement> deleteStatement2 = prepare(deleteStatement2_simple, context);
      prepareStages.add(deleteStatement2);
      // Prepare the statement for `delete(org.tyniest.chat.entity.Chat)`:
      SimpleStatement deleteStatement3_simple = chatHelper.deleteByPrimaryKeyParts(1).build();
      LOG.debug("[{}] Preparing query `{}` for method delete(org.tyniest.chat.entity.Chat)",
          context.getSession().getName(),
          deleteStatement3_simple.getQuery());
      CompletionStage<PreparedStatement> deleteStatement3 = prepare(deleteStatement3_simple, context);
      prepareStages.add(deleteStatement3);
      // Prepare the statement for `findByUserId(java.util.UUID)`:
      SimpleStatement findByUserIdStatement_simple = chatByUserHelper.selectByPrimaryKeyParts(1).build();
      LOG.debug("[{}] Preparing query `{}` for method findByUserId(java.util.UUID)",
          context.getSession().getName(),
          findByUserIdStatement_simple.getQuery());
      CompletionStage<PreparedStatement> findByUserIdStatement = prepare(findByUserIdStatement_simple, context);
      prepareStages.add(findByUserIdStatement);
      // Prepare the statement for `findAllByIds(java.util.List<java.util.UUID>)`:
      SimpleStatement findAllByIdsStatement_simple = chatHelper.selectStart().whereRaw("id in :chatIds").build();
      LOG.debug("[{}] Preparing query `{}` for method findAllByIds(java.util.List<java.util.UUID>)",
          context.getSession().getName(),
          findAllByIdsStatement_simple.getQuery());
      CompletionStage<PreparedStatement> findAllByIdsStatement = prepare(findAllByIdsStatement_simple, context);
      prepareStages.add(findAllByIdsStatement);
      // Prepare the statement for `findBySignalId(java.util.List<java.util.UUID>)`:
      SimpleStatement findBySignalIdStatement_simple = reactionHelper.selectStart().whereRaw("signal_id in :signalIds").build();
      LOG.debug("[{}] Preparing query `{}` for method findBySignalId(java.util.List<java.util.UUID>)",
          context.getSession().getName(),
          findBySignalIdStatement_simple.getQuery());
      CompletionStage<PreparedStatement> findBySignalIdStatement = prepare(findBySignalIdStatement_simple, context);
      prepareStages.add(findBySignalIdStatement);
      // Initialize all method invokers
      // Build the DAO when all statements are prepared
      return CompletableFutures.allSuccessful(prepareStages)
          .thenApply(v -> (ChatRepository) new ChatRepositoryImpl__MapperGenerated(context,
              chatHelper,
              userByChatHelper,
              chatByUserHelper,
              reactionHelper,
              CompletableFutures.getCompleted(findByIdStatement),
              CompletableFutures.getCompleted(saveStatement),
              CompletableFutures.getCompleted(saveStatement1),
              CompletableFutures.getCompleted(saveStatement2),
              CompletableFutures.getCompleted(saveStatement3),
              CompletableFutures.getCompleted(deleteStatement),
              CompletableFutures.getCompleted(deleteStatement1),
              CompletableFutures.getCompleted(deleteStatement2),
              CompletableFutures.getCompleted(deleteStatement3),
              CompletableFutures.getCompleted(findByUserIdStatement),
              CompletableFutures.getCompleted(findAllByIdsStatement),
              CompletableFutures.getCompleted(findBySignalIdStatement)))
          .toCompletableFuture();
    } catch (Throwable t) {
      return CompletableFutures.failedFuture(t);
    }
  }

  public static ChatRepository init(MapperContext context) {
    BlockingOperation.checkNotDriverThread();
    return CompletableFutures.getUninterruptibly(initAsync(context));
  }
}
