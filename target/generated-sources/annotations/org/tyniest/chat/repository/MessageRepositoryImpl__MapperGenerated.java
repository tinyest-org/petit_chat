package org.tyniest.chat.repository;

import com.datastax.oss.driver.api.core.cql.BoundStatement;
import com.datastax.oss.driver.api.core.cql.BoundStatementBuilder;
import com.datastax.oss.driver.api.core.cql.PreparedStatement;
import com.datastax.oss.driver.api.core.cql.SimpleStatement;
import com.datastax.oss.driver.api.mapper.MapperContext;
import com.datastax.oss.driver.api.mapper.entity.saving.NullSavingStrategy;
import com.datastax.oss.driver.internal.core.util.concurrent.BlockingOperation;
import com.datastax.oss.driver.internal.core.util.concurrent.CompletableFutures;
import com.datastax.oss.driver.internal.mapper.DaoBase;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.SuppressWarnings;
import java.lang.Throwable;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.tyniest.chat.entity.Message;
import org.tyniest.chat.entity.MessageHelper__MapperGenerated;

/**
 * Generated by the DataStax driver mapper, do not edit directly.
 */
@SuppressWarnings("all")
public class MessageRepositoryImpl__MapperGenerated extends DaoBase implements MessageRepository {
  private static final Logger LOG = LoggerFactory.getLogger(MessageRepositoryImpl__MapperGenerated.class);

  private final MessageHelper__MapperGenerated messageHelper;

  private final PreparedStatement saveStatement;

  private MessageRepositoryImpl__MapperGenerated(MapperContext context,
      MessageHelper__MapperGenerated messageHelper, PreparedStatement saveStatement) {
    super(context);
    this.messageHelper = messageHelper;
    this.saveStatement = saveStatement;
  }

  @Override
  public void save(Message message) {
    BoundStatementBuilder boundStatementBuilder = saveStatement.boundStatementBuilder();
    messageHelper.set(message, boundStatementBuilder, NullSavingStrategy.DO_NOT_SET, false);
    BoundStatement boundStatement = boundStatementBuilder.build();
    execute(boundStatement);
  }

  public static CompletableFuture<MessageRepository> initAsync(MapperContext context) {
    LOG.debug("[{}] Initializing new instance for keyspace = {} and table = {}",
        context.getSession().getName(),
        context.getKeyspaceId(),
        context.getTableId());
    throwIfProtocolVersionV3(context);
    try {
      // Initialize all entity helpers
      MessageHelper__MapperGenerated messageHelper = new MessageHelper__MapperGenerated(context);
      if ((Boolean)context.getCustomState().get("datastax.mapper.schemaValidationEnabled")) {
        messageHelper.validateEntityFields();
      }
      List<CompletionStage<PreparedStatement>> prepareStages = new ArrayList<>();
      // Prepare the statement for `public abstract void save(org.tyniest.chat.entity.Message) `:
      SimpleStatement saveStatement_simple = messageHelper.insert().build();
      LOG.debug("[{}] Preparing query `{}` for method public abstract void save(org.tyniest.chat.entity.Message) ",
          context.getSession().getName(),
          saveStatement_simple.getQuery());
      CompletionStage<PreparedStatement> saveStatement = prepare(saveStatement_simple, context);
      prepareStages.add(saveStatement);
      // Initialize all method invokers
      // Build the DAO when all statements are prepared
      return CompletableFutures.allSuccessful(prepareStages)
          .thenApply(v -> (MessageRepository) new MessageRepositoryImpl__MapperGenerated(context,
              messageHelper,
              CompletableFutures.getCompleted(saveStatement)))
          .toCompletableFuture();
    } catch (Throwable t) {
      return CompletableFutures.failedFuture(t);
    }
  }

  public static MessageRepository init(MapperContext context) {
    BlockingOperation.checkNotDriverThread();
    return CompletableFutures.getUninterruptibly(initAsync(context));
  }
}
